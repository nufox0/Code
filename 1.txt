const fs = require('fs');

let btech = { subject: 'FSWD', year: '2024', sem: 4 };
let btech1={ subject: 'FSWD', year: '2024', sem: 5 };
const array=[btech, btech1];
const s = JSON.stringify(array);

// Write to file
fs.writeFile('prac3.json', s, (err) => {
    if (err) throw err;
    console.log('File written successfully');
});

// Read from file
fs.readFile('prac3.json', 'utf-8', (err, data) => {
    if (err) throw err;
    console.log(data);
});




practical-2
const fs = require('fs');
const num = [
    [6, 7, 8],
    [9, 10, 11],
    [12, 13, 14]
];
console.log("Array Element: " + num[1][2]);
let arr=JSON.stringify(num);
fs.writeFile('prac2Output.json',arr,(err)=>{
    if(err) throw err;
});


fs.readFile('prac2Output.json', 'utf8', (err, data) => {
    if (err) {
        console.log(err);
        return;
    }
    console.log("File Content is:", data);
});





practica;-4

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Geolocation Example</title>
<style>
#location-info {
font-size: 18px;
margin-top: 20px;
}
</style>
</head>
<body>
<h1>Geolocation Example</h1>
<div id="location-info">
<strong>Latitude:</strong> <span id="latitude"></span><br>
<strong>Longitude:</strong> <span id="longitude"></span>
</div>
<script>
// Check if the browser supports the Geolocation API
if (navigator.geolocation) {
// Request the user's current location
navigator.geolocation.getCurrentPosition(showPosition, showError);
} else {
// Display an error message if the Geolocation API is not supported
showError("Geolocation is not supported by this browser.");
}
// Callback function to handle the successful retrieval of the user's location
function showPosition(position) {
// Extract latitude and longitude from the position object
var latitude = position.coords.latitude;
var longitude = position.coords.longitude;
// Display the latitude and longitude on the web page
document.getElementById("latitude").textContent = latitude.toFixed(6);
document.getElementById("longitude").textContent = longitude.toFixed(6);
}
// Callback function to handle errors during the retrieval of the user's location
function showError(error) {
var errorMessage;
switch (error.code) {
case error.PERMISSION_DENIED:
errorMessage = "User denied the request for Geolocation.";
break;
case error.POSITION_UNAVAILABLE:
errorMessage = "Location information is unavailable.";
break;
case error.TIMEOUT:
errorMessage = "The request to get user location timed out.";
break;
case error.UNKNOWN_ERROR:
errorMessage = "An unknown error occurred.";
break;
default:
errorMessage = "An unspecified error occurred.";
break;
}
// Display the error message on the web page
alert(errorMessage);
}
</script>
</body>
</html>






<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Local Storage Example</title>
</head>
<body>
<h1>Local Storage Example</h1>
<button onclick="saveData()">Save Data</button>
<button onclick="retrieveData()">Retrieve Data</button>
<script>
// Function to save data to Local Storage
function saveData() {
// Get data from user (for simplicity, we're using a prompt here)
var userInput = prompt("Enter some data:");
// Check if the user entered something
if (userInput) {
// Save data to Local Storage with a specific key
localStorage.setItem("userData"
, userInput);
alert("Data saved to Local Storage!");
} else {
alert("Please enter some data.");
}
}
// Function to retrieve data from Local Storage
function retrieveData() {
// Retrieve data from Local Storage using the key
var storedData = localStorage.getItem("userData");
// Check if there is any stored data
if (storedData) {
alert("Data retrieved from Local Storage: " + storedData);
} else {
alert("No data found in Local Storage.");
}
}
</script>
</body>
</html>






<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Drag and Drop Example</title>
<style>
#dragElement {
width: 100px;
height: 100px;
background-color: lightblue;
border: 2px solid darkblue;
margin: 10px;
padding: 10px;
cursor: move;
}
#dropZone {
width: 300px;
height: 200px;
background-color: lightgreen;
border: 2px dashed darkgreen;
margin-top: 20px;
padding: 10px;
}
</style>
</head>
<body>
<h1>Drag and Drop Example</h1>
<div id="dragElement" draggable="true" ondragstart="dragStart(event)">
Drag me!
</div>
<div id="dropZone" ondragover="allowDrop(event)" ondrop="drop(event)">
Drop here!
</div>
<script>
// Function to handle the drag start event
function dragStart(event) {
// Set data to be transferred during drag
event.dataTransfer.setData("text/plain", event.target.id);
}
// Function to allow dropping on the drop zone
function allowDrop(event) {
event.preventDefault();
}
// Function to handle the drop event
function drop(event) {
event.preventDefault();
// Get the dragged element's id from the data transfer
var draggedElementId = event.dataTransfer.getData("text/plain");
// Get the dragged element by id
var draggedElement = document.getElementById(draggedElementId);
// Append the dragged element to the drop zone
document.getElementById("dropZone").appendChild(draggedElement);
}
</script>
</body>
</html>










practical-5 bootstrap

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap Example</title>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
   // <link href="bootstrap-5.3.3-dist/css/bootstrap.min.css" rel="stylesheet"> for offline
</head>
<body>

<!-- Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Navbar</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
            <li class="nav-item active">
                <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">About</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Services</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Contact</a>
            </li>
        </ul>
    </div>
</nav>

<!-- Header -->
<header class="jumbotron">
    <h1 class="display-4">Welcome to Bootstrap Example</h1>
    <p class="lead">This is a simple example demonstrating the usage of Bootstrap Online</p>
</header>

<!-- Main Content -->
<div class="container">
    <div class="row">
        <div class="col-md-8">
            <h2>Body Content</h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ab et sapiente voluptatem deleniti voluptate quam repellat, maxime sint iusto excepturi ipsum obcaecati officiis maiores fuga error. Sunt eligendi dolor animi?</p>
        </div>
        <div class="col-md-4">
            <h2>Sidebar</h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur, eveniet nisi possimus nam voluptatibus distinctio impedit non tempora omnis mollitia, incidunt dignissimos asperiores esse corporis cupiditate? Minus quo vero cumque?</p>
        </div>
    </div>
</div>

<!-- Bootstrap JS -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>







<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Registration</title>
  <!-- Bootstrap CSS CDN link -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="container">
    <h1 class="mt-5 mb-4">Student Registration</h1>
    
    <!-- Student Registration Form -->
    <form>
      <div class="mb-3">
        <label for="rollNumber" class="form-label">Roll Number</label>
        <input type="text" class="form-control" id="rollNumber" placeholder="Enter roll number" required>
      </div>
      <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <input type="text" class="form-control" id="firstName" placeholder="Enter first name" required>
      </div>
      <div class="mb-3">
        <label for="mobileNumber" class="form-label">Mobile Number</label>
        <input type="tel" class="form-control" id="mobileNumber" placeholder="Enter mobile number" required>
      </div>
      <div class="mb-3">
        <label for="email" class="form-label">Email ID</label>
        <input type="email" class="form-control" id="email" placeholder="Enter email" required>
      </div>
      <div class="mb-3">
        <label for="address" class="form-label">Address</label>
        <textarea class="form-control" id="address" rows="3" placeholder="Enter address" required></textarea>
      </div>
      
      <!-- Submit Button -->
      <button type="submit" class="btn btn-primary">Register</button>
    </form>
  </div>

  <!-- Bootstrap JS CDN link (optional if you need Bootstrap JavaScript functionality) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>





--------------------------------------------------------------------------------------------------------


practical-6-tailwind
//hover
<!DOCTYPE html> <html lang="en"> <head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Hover Effect Example</title>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
rel="stylesheet"> <style>
.hover-bg-blue:hover { background-color: blue;
}
.center { display: flex;
justify-content: center; align-items: center; height: 100vh;
} </style>
</head>
<body>
<div class="center">
<div class="p-4 hover-bg-blue">Tailwind CSS<br>Hover Over Me!!!</div>
    </div>
</body>
</html>



//form
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Information Form</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>

<body class="bg-gray-100 p-8">
    <div class="max-w-md mx-auto bg-white p-8 rounded shadow-md">
        <h2 class="text-xl font-bold mb-4">Enter Book Information</h2>
        <form>
            <div class="mb-4">
                <label for="title" class="block text-sm font-medium text-gray-
    700">Title</label>
                <input type="text" id="title" name="title" class="mt-1 p-2 w-full border
    border-gray-300 rounded-md">
            </div>
            <div class="mb-4">
                <label for="author" class="block text-sm font-medium text-gray-
    700">Author</label>
                <input type="text" id="author" name="author" class="mt-1 p-2 w-full
    border border-gray-300 rounded-md">
            </div>
            <div class="mb-4">
                <label for="publisher" class="block text-sm font-medium text-gray-
    700">Publisher</label>
                <input type="text" id="publisher" name="publisher" class="mt-1 p-2 w-
    full border border-gray-300 rounded-md">
            </div>
            <div class="mb-4">
                <label for="year" class="block text-sm font-medium text-gray-
    700">Published Year</label>
                <input type="text" id="year" name="year" class="mt-1 p-2 w-full border
    border-gray-300 rounded-md">
            </div>
            <div class="mb-4">
                <label for="isbn" class="block text-sm font-medium text-gray-
    700">ISBN</label>
                <input type="text" id="isbn" name="isbn" class="mt-1 p-2 w-full border
    border-gray-300 rounded-md">
            </div>
            <div class="mb-4">
                <label for="quantity" class="block text-sm font-medium text-gray-
    700">Quantity</label>
                <input type="number" id="quantity" name="quantity" class="mt-1 p-2 w-
    full border border-gray-300 rounded-md">
            </div>
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">Submit</button>
        </form>
    </div>
</body>

</html>


-----------------------------------------------------------------------------------------------------------------------------------
practical -8

const mysql = require('mysql');

const connection = mysql.createConnection({
    host: 'localhost', 
    user: 'root', 
    password: 'sezan123', 
    database: 'practical'
});


connection.connect((err) => {
    if (err) {
        console.error('Error connecting to MySQL server: ' + err.stack);
        return;
    }
    console.log('Connected to MySQL server as ID ' + connection.threadId);
});


connection.query('CREATE DATABASE IF NOT EXISTS my_database', (err, results) => {
    if (err) throw err;
    console.log('Database created or already exists');
});


connection.query(`CREATE TABLE IF NOT EXISTS my_table (id INT AUTO_INCREMENT
PRIMARY KEY,name VARCHAR(255))`,
    (err, results) => {
        if (err) throw err;
        console.log('Table created or already exists');
    });


connection.query('INSERT INTO my_table (name) VALUES (?)', ['John Doe'], (err, results)=> {
    if (err) throw err;
    console.log('Record inserted:', results);
});


connection.query('UPDATE my_table SET name = ? WHERE id = ?', ['Devendra Vashi', 1],
    (err, results) => {
        if (err) throw err;
        console.log('Record updated:', results);
    });


connection.end((err) => {
    if (err) {
        console.error('Error closing connection: ' + err.stack);
        return;
    }
    console.log('Connection closed');
});



----------------------------------------------------------------------------------
practical-9
// Import required modules
const mysql = require('mysql');

const connection = mysql.createConnection({
    host: 'localhost', 
    user: 'root', 
    password: 'sezan123', 
    database: 'practical'
});

connection.connect((err) => {
    if (err) {
        console.error('Error connecting to MySQL server: ' + err.stack);
        return;
    }
    console.log('Connected to MySQL server as ID ' + connection.threadId);
});

const deleteRecord = (id) => {
    const query =
        `DELETE FROM my_table WHERE id = ?`;
    connection.query(query, [id], (err, results) => {
        if (err) {
            console.error('Error deleting record: ' + err.stack);
            return;
        }
        console.log('Record deleted successfully.');
    });
};

const selectRecord = (id) => {
    const query =
        `SELECT * FROM my_table WHERE id = ?`;
    connection.query(query, [id], (err, results) => {
        if (err) {
            console.error('Error selecting record: ' + err.stack);
            return;
        }
        console.log('Selected record:', results[0]);
    });
};

const selectUniqueRecords = () => {
    const query =
        `SELECT DISTINCT name FROM my_table`;
    connection.query(query, (err, results) => {
        if (err) {
            console.error('Error selecting unique records: ' + err.stack);
            return;
        }
        console.log('Unique records:', results);
    });
};

const dropTable = () => {

    const query = `DROP TABLE my_table1`;
    connection.query(query, (err, results) => {
        if (err) {
            console.error('Error dropping table: ' + err.stack);
            return;
        }
        console.log('Table dropped successfully.');
    });
};

deleteRecord(1);

selectRecord(1);

selectUniqueRecords();

dropTable();
